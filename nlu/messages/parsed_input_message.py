from nlu.stanford_utils import extract_sentence_type
from data_structures import Message

class ParsedInputMessage(Message):
    """
    Parsed representation of user input, generated by the NLU for use
    by the DM.
    """
    frame_keys = []
    meta = {
            'mood':None, # Or some sensible default.
            'confidence':-1.0,
            'sentence': {'type':None, 'word':None}
            }
            
    def __init__(self, raw_input_string):
        """
        Create a new ParsedInput and Fills out the message meta and frame
        attributes.
        """
        Message.__init__(self)
        self.raw_input_string = raw_input_string
        self.meta['confidence'] = self.confidence(raw_input_string)
        self.frame = dict([(key, []) for key in self.frame_keys])
        
        # set meta:sentence
        #TODO: Figure out why py4j calls Exception TypeError: "'NoneType' object is not callable" in...
        sentence_type, sentence_word = extract_sentence_type(raw_input_string)
        self.meta['sentence'] = {'type':sentence_type, 'word':sentence_word}
        # call implemented parse method
        self._parse(raw_input_string)

    def _parse(self, raw_input_string):
        """
        Fills out the message meta and frame attributes.
        """
        raise NotImplementedError
        
    @staticmethod
    def confidence(raw_input_string):
        """
        Returns a confidence value for the raw_input_string matching the
        message type.
        """
        return 0.0
        
    def getFrameTypes(self):
        return self.frame.keys()
    
    def getFrame(self, frameType):
        return self.frame[frameType]
        
    def getSentence(self):
        return self.meta['sentence']
        
    def getConfidence(self):
        return self.meta['confidence']
        
    def __repr__(self):
        return '<%s: frame:%s>' % (self.__class__.__name__, self.frame)

